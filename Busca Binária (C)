//Programa de Busca Binária simples


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int i, j;

long int bubbleSort(int vet[], int n) {
    int trocas = 0; // Contador de trocas

    for ( i = 0; i < n - 1; i++) {
        for ( j = 0; j < n - i - 1; j++) {
            if (vet[j] > vet[j + 1]) {
                int temp = vet[j];
                vet[j] = vet[j + 1];
                vet[j + 1] = temp;
                trocas++; // Incrementa o contador de trocas
            }
        }
    }

    return trocas;
}

// Função para verificar se um elemento já existe no array
int elementoDuplicado(int array[], int tamanho, int elemento) {
    for ( i = 0; i < tamanho; i++) {
        if (array[i] == elemento) {
            return 1; // Elemento encontrado
        }
    }
    return 0; // Elemento não encontrado
}

// Função para buscar um elemento em um array usando busca binária
int buscaBinaria(int array[], int tamanho, int elemento, int *comparacoes) {
    int inicio = 0;
    int fim = tamanho - 1;

    while (inicio <= fim) {
        int meio = (inicio + fim) / 2;
        (*comparacoes)++; // Incrementa o contador de comparações

        // Se o elemento for encontrado no meio, retorne sua posição
        if (array[meio] == elemento) {
            return meio;
        }

        // Se o elemento for maior que o elemento do meio, descarte a metade esquerda
        if (array[meio] < elemento) {
            inicio = meio + 1;
        }
        // Se o elemento for menor, descarte a metade direita
        else {
            fim = meio - 1;
        }
    }

    // Elemento não encontrado
    return -1;
}

int main() {
    int TAM = 1;
    srand(time(NULL));
    int elemento;
    int comparacoes = 0; // Contador de comparações

    printf("\nDigite o tamanho do vetor: ");
    scanf("%d", &TAM);

    int array[TAM];

    for (i = 0; i < TAM; i++) {
        int novoElemento;
        do {
            novoElemento = rand() % 999;
        } while (elementoDuplicado(array, i, novoElemento));

        array[i] = novoElemento;
    }

    long int trocasBubble = bubbleSort(array, TAM);

    for (i = 0; i < TAM; i++) {
        printf("[%d]", array[i]);
    }

    printf("\nDigite um elemento: ");
    scanf("%d", &elemento);

    int resultado = buscaBinaria(array, TAM, elemento, &comparacoes);

    if (resultado != -1) {
        printf("\nElemento %d encontrado na posicao %d\n", elemento, resultado);
    } else {
        printf("\nElemento %d não encontrado no vetor.\n", elemento);
    }

    printf("Número de comparacoes realizadas: %d\n", comparacoes); // Exibe o número de comparações

    return 0;
}
